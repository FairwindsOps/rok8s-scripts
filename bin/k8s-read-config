#!/bin/bash
#shellcheck disable=SC2034
LOG_LEVEL="${LOG_LEVEL:-info}"

rok8s_echo() {
  if [ "${LOG_LEVEL}" != "none" ]; then
    echo "$1"
  fi
}

if [ "${ROK8S_DEBUG}" == "true" ]; then
  set -x
fi

if [ -n "${CONFIG_READ+1}" ]
then
  rok8s_echo "Config already read"
  return 0
fi
rok8s_echo "Reading config"
CONFIG_READ=1

while getopts ":f:" opt; do
  case $opt in
    f)
      CONFIG_FILE=$OPTARG
      ;;
    \?)
      rok8s_echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

BASEDIR=$(pwd)
DEPLOY_TIMEOUT=${DEPLOY_TIMEOUT:-300}
BLOCKING_JOB_TIMEOUT=${BLOCKING_JOB_TIMEOUT:-300}
ROK8S_ROLLBACK_DEPLOYMENTS=${ROK8S_ROLLBACK_DEPLOYMENTS:-no}
#shellcheck disable=SC2001
SANITIZED_BRANCH=$(echo "${CI_BRANCH}" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
ROK8S_TMP="${ROK8S_TEMP:-$(mktemp -d)}"


CONFIG=${CONFIG_FILE:-deploy/k8s-scripts.config}
if test -f "$BASEDIR"/"$CONFIG" ; then
  rok8s_echo "Loading configuration from ${BASEDIR}/$CONFIG"
  #shellcheck disable=SC1090
  . "$BASEDIR"/"$CONFIG"
else
  rok8s_echo "Config file, ${BASEDIR}/$CONFIG, not found." >&2
  exit 1
fi

rok8s_echo "[dockerfile]: $DOCKERFILE"
rok8s_echo "[dockertag]: $DOCKERTAG"

rok8s_echo "[external_registry_base_domain]: $EXTERNAL_REGISTRY_BASE_DOMAIN"

NAMESPACE=${NAMESPACE:=default}
rok8s_echo "[namespace]: $NAMESPACE"

function expand_files() {
  local INPUT_NAME="${1}"
  local OUTPUT_NAME="${2}"
  local FILE_ENDING="${3}"

  local INPUTS=""
  eval "INPUTS=\${${INPUT_NAME}[@]}"

  if [[ ${#INPUTS} -eq 0 ]]; then
    return
  fi

  rok8s_echo "[${INPUT_NAME}]: \${${INPUT_NAME}[@]}"

  for i in ${INPUTS}
  do
    filename="$BASEDIR/deploy/$i.${FILE_ENDING}"
    if [[ -f "${filename}" ]]; then
        #shellcheck disable=SC2027,SC2086
      eval "$OUTPUT_NAME+=("${filename}")"
    elif [[ -z "${ROK8S_ENABLE_OPTIONAL_CONFIGS}" ]]; then
      rok8s_echo "ERROR: Missing ${filename}"
      exit 1
    else
      rok8s_echo "INFO: Skipping optional ${filename}"
    fi
  done

  rok8s_echo "[${OUTPUT_NAME}]: \${${OUTPUT_NAME}[@]}"
}

CONFIGMAP_FILES=()
expand_files "CONFIGMAPS" "CONFIGMAP_FILES" "configmap.yml"

FROMFILE_CONFIGMAP_FILES=()
expand_files "FROMFILE_CONFIGMAPS" "FROMFILE_CONFIGMAP_FILES" "configmap.fromfile"

SERVICE_ACCOUNT_FILES=()
expand_files "SERVICE_ACCOUNTS" "SERVICE_ACCOUNT_FILES" "service_account.yml"

SECRET_FILES=()
expand_files "SECRETS" "SECRET_FILES" "secret.yml"

EXTERNAL_SECRET_FILES=()
expand_files "EXTERNAL_SECRETS" "EXTERNAL_SECRET_FILES" "secret.external"

SOPS_SECRET_FILES=()
expand_files "SOPS_SECRETS" "SOPS_SECRET_FILES" "secret.sops.yml"

PERSISTENT_VOLUME_FILES=()
expand_files "PERSISTENT_VOLUMES" "PERSISTENT_VOLUME_FILES" "persistent_volume.yml"

PERSISTENT_VOLUME_CLAIM_FILES=()
expand_files "PERSISTENT_VOLUME_CLAIMS" "PERSISTENT_VOLUME_CLAIM_FILES" "persistent_volume_claim.yml"

STATEFULSET_FILES=()
expand_files "STATEFULSETS" "STATEFULSET_FILES" "statefulset.yml"

SERVICE_FILES=()
expand_files "SERVICES" "SERVICE_FILES" "service.yml"

ENDPOINT_FILES=()
expand_files "ENDPOINTS" "ENDPOINT_FILES" "endpoint.yml"

INGRESS_FILES=()
expand_files "INGRESSES" "INGRESS_FILES" "ingress.yml"

JOBS_FILES=()
expand_files "JOBS" "JOBS_FILES" "job.yml"

DEPLOYMENT_FILES=()
expand_files "DEPLOYMENTS" "DEPLOYMENT_FILES" "deployment.yml"

HORIZONTAL_POD_AUTOSCALER_FILES=()
expand_files "HORIZONTAL_POD_AUTOSCALERS" "HORIZONTAL_POD_AUTOSCALER_FILES" "horizontal_pod_autoscaler.yml"

POD_DISRUPTION_BUDGET_FILES=()
expand_files "POD_DISRUPTION_BUDGETS" "POD_DISRUPTION_BUDGET_FILES" "pod_disruption_budget.yml"

BLOCKING_JOBS_FILES=()
expand_files "BLOCKING_JOBS" "BLOCKING_JOBS_FILES" "blockingjob.yml"

CRONJOB_FILES=()
expand_files "CRONJOBS" "CRONJOB_FILES" "cronjob.yml"

DAEMONSET_FILES=()
expand_files "DAEMONSETS" "DAEMONSET_FILES" "daemonset.yml"

CLUSTER_NAME=${CLUSTER_NAME}
rok8s_echo "[cluster_name]: $CLUSTER_NAME"
rok8s_echo ""
