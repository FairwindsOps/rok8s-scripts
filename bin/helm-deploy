#!/bin/bash

set -eo pipefail

. k8s-read-config

# shellcheck disable=SC2086

# Set a CI_REF from branch or tag
CI_REF="${CI_TAG}"
CI_REF="${CI_REF:-$CI_BRANCH}"
CI_REF=$(echo "${CI_REF}" | tr / _)

detect_tiller_namespace() {
    # If there is more than one tiller, then auto-detection will not work.
    mapfile -t TILLERS < <(kubectl get deploy --all-namespaces -l app=helm,name=tiller | awk 'NR > 1 {print $1}')
    if [ ${#TILLERS[@]} -gt 1 ]; then
      echo "Multiple TILLERS were found.  This is not supported by auto-detection.  Please specify TILLER_NAMESPACE in your config."
      echo "Found a tiller in these namespaces:"
      printf '%s\n' "${TILLERS[@]}"
      exit 1
    else
      TILLER_NAMESPACE="${TILLERS[0]:-kube-system}"
      rok8s_echo "Set tiller namespace to $TILLER_NAMESPACE"
    fi
}

if [ "${HELM_TEMPLATE_ONLY}" != "true" ]; then
  if [[ ! $(kubectl get namespace "$NAMESPACE") ]]; then
    rok8s_echo "Creating ${NAMESPACE} namespace"
    # shellcheck disable=SC2086
    kubectl create namespace $NAMESPACE;
  fi

  # Set tiller_namespace if it isn't already set.
  # Allows us to use helm even if it's not installed
  # in kube-system.
  if [ -z "$TILLER_NAMESPACE" ]; then
    detect_tiller_namespace
  fi

  # If using k8s-deploy in combination with helm-deploy
  #  while transitioning to helm, set this to avoid deploying
  #  secrets twice
  if [[ -z "${ROK8S_HELM_TRANSITIONING}" ]]; then
    . k8s-deploy-secrets
  fi

  HELM_DEFAULT_TIMEOUT=300
  HELM_HOME=${HELM_HOME}
  helm init --client-only
fi

format_multiple_values_files() {
  values_files="$1"
  formatted_files=""
  echo "${values_files}" | sed -n 1'p' | tr ',' '\n' | ( while read -r file_name; do
    file="./deploy/${file_name}.values.yml,"
    formatted_files="${formatted_files}${file}"
  done
  echo "${formatted_files%?}" )
}

helm_upgrade() {
  # shellcheck disable=SC2086
  helm upgrade --install "${CHART_RELEASE_NAME}" \
    "${CHART_PATH}" -f "${CHART_VALUES}" \
    --set image.tag="${CI_SHA1}" \
    --set rok8sCIRef="${CI_REF}" \
    --set sanitizedBranch="${SANITIZED_BRANCH}" \
    --namespace="${NAMESPACE}" \
    --tiller-namespace="${TILLER_NAMESPACE}" \
    --wait \
    --timeout "${HELM_TIMEOUTS[$index]:-$HELM_DEFAULT_TIMEOUT}" \
    ${ROK8S_HELM_DEPLOY_EXTRAARGS} \
      2>&1 | tee "${ROK8S_TMP}/helm.out"
}

helm_template() {
  temp_dir="${ROK8S_TMP}/remote_repo"
  if [ -n "${HELM_REPO_URLS}" ]; then
    helm fetch --untar --untardir "${temp_dir}" "${CHART_PATH}"
    path_to_use=$(echo "$CHART_PATH" | sed -e 's/.*\///')
    path_to_use="$temp_dir/$path_to_use"
  else
    path_to_use=${CHART_PATH}
  fi
  helm template "${path_to_use}" \
    -f "${CHART_VALUES}" \
    --namespace="${NAMESPACE}" \
    --set image.tag="${CI_SHA1}" \
    --set rok8sCIRef="${CI_REF}" \
    --set sanitizedBranch="${SANITIZED_BRANCH}"
  if [ -n "${HELM_REPO_URLS}" ]; then
    rm -rf "${temp_dir}"
  fi
}


for index in "${!HELM_REPO_NAMES[@]}"
do
  rok8s_echo "Adding Helm Repo: ${HELM_REPO_NAMES[index]}"
  helm repo add "${HELM_REPO_NAMES[index]}" "${HELM_REPO_URLS[index]}"
done

rok8s_echo "Deploying Helm Charts"
for index in "${!HELM_CHARTS[@]}"
do
  CHART_PATH_CONFIG=${HELM_CHARTS[$index]}
  CHART_PATH_FIRST_SECTION=$(echo "${CHART_PATH_CONFIG}" | cut -d/ -f1)

  if [[ " ${HELM_REPO_NAMES[*]} " == *" ${CHART_PATH_FIRST_SECTION} "* ]]; then
    USING_REMOTE_CHART="true"
    CHART_PATH="${CHART_PATH_CONFIG}"
  else
    CHART_PATH="./deploy/${CHART_PATH_CONFIG}"
  fi

  CHART_RELEASE_NAME=${HELM_RELEASE_NAMES[$index]:-${HELM_CHARTS[$index]}}
  CHART_VALUES=${HELM_VALUES[$index]}

  # if there is more than one values files listed
  # then pass all values file to helm upgrade command
  if [[ "${CHART_VALUES}" = *","* ]]; then
    CHART_VALUES=$(format_multiple_values_files "${CHART_VALUES}")
  else
    CHART_VALUES="./deploy/${CHART_VALUES}.values.yml"
  fi

  rok8s_echo "Applying ${CHART_PATH} with ${CHART_VALUES}"

  if [ "${HELM_TEMPLATE_ONLY}" == "true" ]; then
    helm_template

  else
    if [ "${USING_REMOTE_CHART}" != "true" ]; then
      helm dep up "${CHART_PATH}"
    fi

    set +e
    helm_upgrade
    helm_ret=$?
    set -e

    if [ $helm_ret -gt 0 ] && grep -q "already exists" "${ROK8S_TMP}/helm.out"; then
      rok8s_echo "Detected that there are existing resources."
      if [ -n "${ROK8S_HELM_ADOPT_EXISTING}" ]; then
        rok8s_echo "Attempting to force adoption of existing resources."
        latest_revision=$(helm get "${CHART_RELEASE_NAME}" | grep REVISION | awk '{print $2}')
        kubectl -n kube-system label cm "${CHART_RELEASE_NAME}.v${latest_revision}" STATUS=DEPLOYED --overwrite
        helm_upgrade
      else
        rok8s_echo "Not attempting adoption. Set ROK8S_HELM_ADOPT_EXISTING=1 to try adopting existing resources."
        exit $helm_ret
      fi
    elif [ $helm_ret -gt 0 ]; then
      exit $helm_ret
    fi

    echo "Done deploying Helm Charts"
    echo ""
  fi
done
