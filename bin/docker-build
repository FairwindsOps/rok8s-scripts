#!/bin/bash

. k8s-read-config "$@"
. docker-resolve

if [ -z "$BASEDIR" ];    then echo BASEDIR must be set; exit 1; fi
if [ -z "$DOCKERTAG" ];  then echo DOCKERTAG must be set; exit 1; fi
if [ -z "$DOCKERFILE" ]; then echo DOCKERFILE must be set; exit 1; fi

PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
CI_BRANCH=$(echo "${CI_BRANCH}" | tr / _)

# support overriding "latest"
DOCKER_LATEST_TAG=${DOCKER_LATEST_TAG:-latest}

if [ "$DOCKER_BUILD_CACHE_FROM" == "available" ]; then
  echo "Using --cache-from to improve performance"

  CACHE_FROM_TARGETS=""
  # shellcheck disable=2086
  while read -r CACHE_TARGET; do
    if [ "${CACHE_TARGET}" == "" ]; then
      break
    fi
    echo "Working on Dockerfile target[${CACHE_TARGET}]..."
    TARGET_TAG=cache-${CI_BRANCH}-${CACHE_TARGET}
    TARGET_IMAGE=${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}

    echo "Checking for existing cache image for target[${CACHE_TARGET}]..."
    docker pull "${TARGET_IMAGE}:${TARGET_TAG}" || true
    docker pull "${TARGET_IMAGE}:master" || true

    echo "Building Dockerfile target[${CACHE_TARGET}]..."
    # shellcheck disable=2086
    docker build --rm=false -t "${TARGET_IMAGE}:${TARGET_TAG}" -f "${BASEDIR}/${DOCKERFILE}" \
      --target "${CACHE_TARGET}" \
      ${CACHE_FROM_TARGETS} \
      ${ROK8S_DOCKER_BUILD_EXTRAARGS} \
      --cache-from "${TARGET_IMAGE}:${TARGET_TAG}" \
      --cache-from "${TARGET_IMAGE}:master" \
      "${BASEDIR}"
    CACHE_FROM_TARGETS="${CACHE_FROM_TARGETS} --cache-from ${TARGET_IMAGE}:${TARGET_TAG}"
  done <<< "$(grep -i '^FROM.* AS ' ${DOCKERFILE} | awk '{print $4}')"

  docker pull "${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}:$PREVIOUS_COMMIT" || true
  docker pull "${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}:$CI_BRANCH" || true
  docker pull "${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}:master" || true
  if [ "${DOCKER_TARGET}" != "" ]; then
    DOCKER_TARGET="--target=${DOCKER_TARGET}"
  fi
  # shellcheck disable=2086
  docker build --rm=false -t "${DOCKERTAG}:${DOCKER_LATEST_TAG}" -f "${BASEDIR}/${DOCKERFILE}" \
    ${CACHE_FROM_TARGETS} \
    ${DOCKER_TARGET} \
    ${ROK8S_DOCKER_BUILD_EXTRAARGS} \
    --cache-from "${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}:$PREVIOUS_COMMIT" \
    --cache-from "${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}:$CI_BRANCH" \
    --cache-from "${EXTERNAL_REGISTRY_BASE_DOMAIN}/${REPOSITORY_NAME}:master" \
    "${BASEDIR}"
else
  echo "--cache-from not available with this version of Docker"
  # shellcheck disable=2086
  docker build --rm=false -t "${DOCKERTAG}:${DOCKER_LATEST_TAG}" -f "${BASEDIR}/${DOCKERFILE}" ${ROK8S_DOCKER_BUILD_EXTRAARGS} "${BASEDIR}"
fi
# shellcheck disable=2181
if [ $? -ne 0 ]
then
  echo "Docker build failed! Aborting"
  exit 1
fi

if [ "$ROK8S_ENABLE_CHANGE_DETECTION" ]; then
  #Check to see if the digest for this image has changed.  If it has not, then indicate that
  printf "\\nRunning change detection...\\n"
  oldDigest=$(docker inspect "${EXTERNAL_REGISTRY_BASE_DOMAIN}"/"${REPOSITORY_NAME}":"$CI_BRANCH" | jq -r .[].Id)

  newDigest=$(docker inspect "${EXTERNAL_REGISTRY_BASE_DOMAIN}"/"${REPOSITORY_NAME}":"${DOCKER_LATEST_TAG}" | jq -r .[].Id)

  changeFile=".changesDetected"
  if [ -f $changeFile ]; then
    rm $changeFile
  fi
  if [ "$oldDigest" == "$newDigest" ]; then
    echo "false" > $changeFile
  else #Default to true so that tests will be run if something amiss
    echo "true" > $changeFile
  fi
  printf "Result of change detection: %s\\n" "$(cat $changeFile)"
fi

# Fire the image scanner if enabled - see the `docker-microscanner` script for details
. docker-microscanner
