#!/bin/bash
DEFAULT_REPLICA_COUNT=1
set -eo pipefail

. k8s-read-config

echo "Deploying Namespace"
kubectl get ns "${NAMESPACE}" >/dev/null 2>&1 || kubectl create ns "${NAMESPACE}"
echo "Done deploying Namespace"

. k8s-deploy-secrets

echo "Deploying ConfigMaps"
for index in "${!CONFIGMAP_FILES[@]}"; do
  CONFIGMAP_FILE=${CONFIGMAP_FILES[$index]}
  echo "Applying ${CONFIGMAP_FILE}"
  kubectl apply -f ${CONFIGMAP_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying ConfigMaps"
echo ""

echo "Deploying From File Configmaps"
for index in "${!FROMFILE_CONFIGMAP_FILES[@]}"; do
  CONFIGMAP_FILE=${FROMFILE_CONFIGMAP_FILES[$index]}

  CONFIGMAP_NAME=${CONFIGMAP_FILE##*/}
  CONFIGMAP_NAME=${CONFIGMAP_NAME%.configmap.fromfile}

  FROMFILES="$(cat ${CONFIGMAP_FILE})"
  FROMFILE_ARGS=""
  for FROMFILE in $FROMFILES
  do
    FROMFILE_ARGS+=" --from-file=$FROMFILE "
  done

  echo "Applying ${FROMFILE_CONFIGMAP_FILES}"
  kubectl create configmap ${CONFIGMAP_NAME} --namespace=$NAMESPACE ${FROMFILE_ARGS} --dry-run -o yaml | kubectl apply --namespace=$NAMESPACE -f -
done
echo "Done deploying From File ConfigMaps"
echo ""

echo "Deploying Services"
for index in "${!SERVICE_FILES[@]}"
do
  SERVICE_FILE=${SERVICE_FILES[$index]}
  echo "Applying ${SERVICE_FILE}"
  kubectl apply -f ${SERVICE_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying Services"
echo ""

echo "Deploying Persistent Volumes"
for index in "${!PERSISTENT_VOLUME_FILES[@]}"
do
  PERSISTENT_VOLUME_FILE=${PERSISTENT_VOLUME_FILES[$index]}
  echo "Applying ${PERSISTENT_VOLUME_FILE}"
  kubectl apply -f ${PERSISTENT_VOLUME_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying Persistent Volumes"
echo ""

echo "Deploying Persistent Volume Claims"
for index in "${!PERSISTENT_VOLUME_CLAIM_FILES[@]}"
do
  PERSISTENT_VOLUME_CLAIM_FILE=${PERSISTENT_VOLUME_CLAIM_FILES[$index]}
  echo "Applying ${PERSISTENT_VOLUME_CLAIM_FILE}"
  kubectl apply -f ${PERSISTENT_VOLUME_CLAIM_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying Persistent Volume Claims"
echo ""

echo "Deploying StatefulSets"
for index in "${!STATEFULSET_FILES[@]}"
do
  STATEFULSET_FILE=${STATEFULSET_FILES[$index]}
  echo "Applying ${STATEFULSET_FILE}"
  kubectl apply -f ${STATEFULSET_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying StatefulSets"
echo ""

echo "Deploying Endpoints"
for index in "${!ENDPOINT_FILES[@]}"
do
  ENDPOINT_FILE=${ENDPOINT_FILES[$index]}
  echo "Applying ${ENDPOINT_FILE}"
  kubectl apply -f ${ENDPOINT_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying endpoints"
echo ""

echo "Deploying Ingress Resources"
for index in "${!INGRESS_FILES[@]}"
do
  INGRESS_FILE=${INGRESS_FILES[$index]}
  echo "Applying ${INGRESS_FILE}"
  kubectl apply -f ${INGRESS_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying Ingress Resources"

echo "Deploying Jobs"
for index in "${!JOBS_FILES[@]}"
do
  JOB=${JOBS[$index]##*/}
  JOB_FILE=${JOBS_FILES[$index]}
  if [ -n "$CI_SHA1" ]
  then
    echo "Updating image tag from latest to ${CI_SHA1} for ${JOB_FILE}"
    sed 's/:latest/':${CI_SHA1}'/g;' ${JOB_FILE} > ${JOB_FILE}-${CI_SHA1}
    echo "Updating ${JOB_FILE}-${CI_SHA1}"
    JOB_FILE=${JOB_FILE}-${CI_SHA1}
  fi
  kubectl delete --namespace="${NAMESPACE}" job "${JOB}" 2>/dev/null || true
  kubectl apply -f ${JOB_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying Jobs"
echo ""

echo "Deploying CronJobs"
for index in "${!CRONJOB_FILES[@]}"
do
  CRONJOB=${CRONJOBS[$index]##*/}
  CRONJOB_FILE=${CRONJOB_FILES[$index]}
  if [ -n "$CI_SHA1" ]
  then
    echo "Updating image tag from latest to ${CI_SHA1} for ${CRONJOB_FILE}"
    sed 's/:latest/':${CI_SHA1}'/g;' ${CRONJOB_FILE} > ${CRONJOB_FILE}-${CI_SHA1}
    echo "Updating ${CRONJOB_FILE}-${CI_SHA1}"
    CRONJOB_FILE=${CRONJOB_FILE}-${CI_SHA1}
  fi
  kubectl apply -f ${CRONJOB_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying CronJobs"
echo ""

echo "Deploying Blocking Jobs"
for index in "${!BLOCKING_JOBS_FILES[@]}"
do
  BLOCKING_JOB=${BLOCKING_JOBS[$index]##*/}
  BLOCKING_JOB_FILE=${BLOCKING_JOBS_FILES[$index]}

  # If we are runnin in CI, replace :latest with the CI_SHA1
  if [ -n "$CI_SHA1" ]
  then
    echo "Updating image tag from latest to ${CI_SHA1} for ${BLOCKING_JOB_FILE}"
    sed 's/:latest/':${CI_SHA1}'/g;' ${BLOCKING_JOB_FILE} > ${BLOCKING_JOB_FILE}-${CI_SHA1}
    echo "Updating ${BLOCKING_JOB_FILE}-${CI_SHA1}"
    BLOCKING_JOB_FILE=${BLOCKING_JOB_FILE}-${CI_SHA1}
  fi

  BLOCKING_JOB=${BLOCKING_JOBS[$index]##*/}
  kubectl delete --namespace="${NAMESPACE}" job "${BLOCKING_JOB}" 2>/dev/null || true
  kubectl apply -f ${BLOCKING_JOB_FILE} --namespace=$NAMESPACE
done
echo "Done deploying Blocking Jobs"
echo ""

echo "Running Blocking Jobs"
for index in "${!BLOCKING_JOBS[@]}"
do
  BLOCKING_JOB=${BLOCKING_JOBS[$index]##*/}
  echo "Checking jobs for $BLOCKING_JOB"
  timeout.sh -t ${BLOCKING_JOB_TIMEOUT} run-blocking-job $BLOCKING_JOB $NAMESPACE
done
echo ""

echo "Deploying DaemonSets"
for index in "${!DAEMONSET_FILES[@]}"
do
  DAEMONSET=${DAEMONSETS[$index]##*/}
  DAEMONSET_FILE=${DAEMONSET_FILES[$index]}
  if [ -n "$CI_SHA1" ]
  then
    echo "Updating image tag from latest to ${CI_SHA1} for ${DAEMONSET_FILE}"
    sed 's/:latest/':${CI_SHA1}'/g;' ${DAEMONSET_FILE} > ${DAEMONSET_FILE}-${CI_SHA1}
    echo "Updating ${DAEMONSET_FILE}-${CI_SHA1}"
    DAEMONSET_FILE=${DAEMONSET_FILE}-${CI_SHA1}
  fi
  kubectl apply -f ${DAEMONSET_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying DaemonSets"
echo ""


echo "Deploying Deployments"
for index in "${!DEPLOYMENT_FILES[@]}"
do
  DEPLOYMENT=${DEPLOYMENTS[$index]##*/}
  DEPLOYMENT_FILE=${DEPLOYMENT_FILES[$index]}
  if [ -n "$CI_SHA1" ]
  then
    echo "Updating image tag from latest to ${CI_SHA1} for ${DEPLOYMENT_FILE}"
    sed 's/:latest/':${CI_SHA1}'/g;' ${DEPLOYMENT_FILE} > ${DEPLOYMENT_FILE}-${CI_SHA1}
    echo "Updating ${DEPLOYMENT_FILE}-${CI_SHA1}"
    DEPLOYMENT_FILE=${DEPLOYMENT_FILE}-${CI_SHA1}
  fi

  # This is workaround attended to address an HPA issue where the correct number of pods are not deployed when
  # 'kubectl apply' is used to redeploy a deployment that has been scaled by an HPA.  There is an open issue for
  # this: https://github.com/kubernetes/kubernetes/issues/25238

  # If we can match 'replicas: hpa' in te deployment file
  if [[ -n $( awk -F: '/replicas: hpa/' $DEPLOYMENT_FILE ) ]]
  then
    # Check to see if the deployment exists yet. If it does then get current replicas, if not set to default.
    if [[ ! -z $(kubectl get deployments --namespace=${NAMESPACE} -o json | jq -r '.items[].metadata.name' | grep -x ${DEPLOYMENT}) ]]
    then
      REPLICA_COUNT=$(kubectl get deployment ${DEPLOYMENT} --namespace=${NAMESPACE} -o json | jq '.status.readyReplicas')
    else
      REPLICA_COUNT=${DEFAULT_REPLICA_COUNT}
    fi
    # Sed replica count into the deployment file in place of 'hpa'
    echo "Updating replica count to ${REPLICA_COUNT} for ${DEPLOYMENT_FILE}"
    sed -e 's/replicas: hpa/replicas: '${REPLICA_COUNT}'/g;' ${DEPLOYMENT_FILE} > ${DEPLOYMENT_FILE}-hpa
    DEPLOYMENT_FILE=${DEPLOYMENT_FILE}-hpa
  fi

  kubectl apply -f ${DEPLOYMENT_FILE} --namespace=$NAMESPACE --record
  rm -f ${DEPLOYMENT_FILE}-hpa

done
echo "Done deploying Deployments"
echo ""

echo "Deploying Horizontal Pod Autoscalers"
for index in "${!HORIZONTAL_POD_AUTOSCALER_FILES[@]}"
do
  HORIZONTAL_POD_AUTOSCALER_FILE=${HORIZONTAL_POD_AUTOSCALER_FILES[$index]}
  echo "Applying ${HORIZONTAL_POD_AUTOSCALER_FILE}"
  kubectl apply -f ${HORIZONTAL_POD_AUTOSCALER_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying Horizontal Pod Autoscalers"

echo "Deploying Pod Disruption Budgets"
for index in "${!POD_DISRUPTION_BUDGET_FILES[@]}"
do
  POD_DISRUPTION_BUDGET_FILE=${POD_DISRUPTION_BUDGET_FILES[$index]}
  echo "Replacing ${POD_DISRUPTION_BUDGET_FILE}"
  kubectl replace --force --cascade -f ${POD_DISRUPTION_BUDGET_FILE} --namespace=$NAMESPACE --record
done
echo "Done deploying Pod Disruption Budget"
