#!/bin/bash
#shellcheck disable=SC2030,SC2031,SC2235,SC2086

# Runs a Kubernetes Job once. Designed for a single, non-parallel job, typically db migrations
# http://kubernetes.io/docs/user-guide/jobs/#parallel-jobs
# The job needs to be located in $BASEDIR/deploy, named ${JOB_NAME}.job.yml,
# and JOB_NAME should match the job's metadata.name attribute
# Usage: ./script/run-migrations.sh JOB_NAME

if [ -z "$1" ]
then
  echo "ERROR: No blocking job specified"
  exit 1
fi

JOB_NAME="$1"
POLL_TRIES=${POLL_TRIES:-30}
POLL_WAIT=${POLL_WAIT:-10}

ACTIVE=$(kubectl get job -o 'jsonpath={.status.active}' "$JOB_NAME" --namespace=${2:=default})

if [ "$ACTIVE" != 1 ]
then
  echo "Blocking job $JOB_NAME hasn't started, something is wrong"
fi

COUNTER=0
while [  $COUNTER -lt $POLL_TRIES ]; do
  ((COUNTER=COUNTER+1))
  echo "$JOB_NAME Blocking job check: ${COUNTER}"
  ACTIVE=$(kubectl get job -o 'jsonpath={.status.active}' "$JOB_NAME" --namespace=${2:=default})
  SUCCEEDED=$(kubectl get job -o 'jsonpath={.status.succeeded}' "$JOB_NAME" --namespace=${2:=default})
  if ([ "$ACTIVE" == "null" ] || [[ -z "$ACTIVE" ]] ) && [ "$SUCCEEDED" == "1" ]; then
    echo "Blocking job $JOB_NAME succesfully completed, deleting"
    kubectl delete job "${JOB_NAME}" --namespace=${2:=default}
    exit $?
  else
    sleep "${POLL_WAIT}"
  fi
done

echo "Blocking job $JOB_NAME failed to complete"
exit 124
