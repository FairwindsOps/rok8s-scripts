#!/bin/bash
# deploy-secrets

set -o errtrace

. k8s-read-config
. _functions.bash

if [ -n "${SECRETS_DEPLOYED+1}" ]
then
  echo "Secrets already deployed"
  return 0
fi

echo "Deploying Object Store Secrets"
for EXTERNAL_SECRET_FILE in "${EXTERNAL_SECRET_FILES[@]}"
do
  # Make a place to put the files
  SECRETS_PATH=$(mktemp -d)
  trap "rm -rf ${SECRETS_PATH}" EXIT

  # Use the filename as the secret name
  SECRET_NAME=${EXTERNAL_SECRET_FILE##*/}
  SECRET_NAME=${SECRET_NAME%.secret.external}

  OBJSTORE_URL="$(cat ${EXTERNAL_SECRET_FILE})"
  if [[ "$OBJSTORE_URL" == s3* ]]; then
    OBJSTORE_UTIL="aws s3 cp --recursive"
  else
    OBJSTORE_UTIL="gsutil rsync -r"
  fi

  ${OBJSTORE_UTIL} "${OBJSTORE_URL}" "${SECRETS_PATH}"
  _kubeApplyOutput="$(kubectl create secret \
    generic "${SECRET_NAME}" \
    --from-file "${SECRETS_PATH}" \
    --dry-run -o yaml | kubectl apply "--namespace=${NAMESPACE}" -f - 2>&1)"
  scrub_secret_data "${_kubeApplyOutput}"

  # Remove local copy
  rm -rf ${SECRETS_PATH}
done
echo "Done deploying Object Store Secrets"
echo ""

echo "Deploying Encrypted Secrets"
for SOPS_SECRET_FILE in "${SOPS_SECRET_FILES[@]}"
do
  sops ${SOPS_OPTIONS} --decrypt "${SOPS_SECRET_FILE}" | \
  _kubeApplyOutput="$(kubectl apply "--namespace=${NAMESPACE}" -f - 2>&1)"
  scrub_secret_data "${_kubeApplyOutput}"
done
echo "Done deploying Encrypted Secrets"
echo ""

echo "Deploying Secrets"
for index in "${!SECRET_FILES[@]}"
do
  SECRET_FILE=${SECRET_FILES[$index]}
  echo "Applying ${SECRET_FILE}"
  _kubeApplyOutput="$(kubectl apply -f ${SECRET_FILE} --namespace=$NAMESPACE --record 2>&1)"
  scrub_secret_data "${_kubeApplyOutput}"
done
echo "Done deploying Secrets"
echo ""

SECRETS_DEPLOYED=1
