description: >
  sets up a working e2e testing environment for Kubernetes using
  kind and also sets up a way to access it via the e2e-command-runner
  container. There are two entrypoints
  for scripts here, one is a pre_script, and one is the script.
  The pre_script runs on the CircleCI executor itself and allows
  access to the repository that was checked out, as well as provides
  the opportunity to copy more files over to the command runner. This
  can be done using `docker cp <file> e2e-command-runner:<path>.
  The regular script is copied over to the command runner container
  and executed on the command runner, providing access to the
  Kubernetes kind cluster via kubectl and helm commands.
parameters:
  kind_version:
    description: "The kind version to use. See https://github.com/kubernetes-sigs/kind/releases"
    type: string
    default: "0.7.0"
  kind_node_image:
    description: "The kind node image to use.  See https://github.com/kubernetes-sigs/kind/releases"
    type: string
    default: "kindest/node:v1.15.7@sha256:e2df133f80ef633c53c0200114fce2ed5e1f6947477dbc83261a6a921169488d"
  command_runner_image:
    description: "The image to execute commands from against the kind cluster. Also where the script gets executed."
    type: string
    default: "quay.io/reactiveops/ci-images:v11-alpine"
  pre_script:
    description: "Script to run on the local machine before running on command runner."
    type: string
  pre_script_steps:
    description: "Define and inject a set of custom steps to run in the local machine before scripts are executed against the command runner."
    type: steps
    default: []
  script:
    description: "The script to run on the command runner."
    type: string
  executor:
    description: "The name of custom executor to use. Only recommended for development."
    type: executor
    default: ci-images
  enable_docker_layer_caching:
    type: boolean
    description: "Enables docker_layer_caching on remote docker. Requires a paid plan."
    default: false
  store-test-results:
    description: |
      The location to store test results. This path will be used in the command runner as well as
      the executor, so it is recommended that you choose something like /tmp/test-results
    type: string
    default: ""
  store-artifacts:
    description: |
      The location to store artifacts from. This path will be used in the command runner as well as
      the executor, so it is recommended that you choose something like /tmp/output
    type: string
    default: ""
  attach-workspace:
    description: |
      If true, the attach_workspace step will be run before any other steps.
    type: boolean
    default: false
  workspace-location:
    description: |
      Where to mount the workspace if attach-workspace is true.
    type: string
    default: "/tmp/workspace"
executor: <<parameters.executor>>
steps:
  - when:
      condition: <<parameters.attach-workspace>>
      steps:
        - attach_workspace:
            at: <<parameters.workspace-location>>
  - checkout
  - setup_remote_docker:
      docker_layer_caching: << parameters.enable_docker_layer_caching >>
  - set_env
  - e2e_start_kind_cluster:
      kind_node_image: << parameters.kind_node_image >>
      kind_version: << parameters.kind_version >>
  - e2e_start_command_runner:
      command_runner_image: << parameters.command_runner_image >>
  - e2e_hostpath_provisioner
  - steps: << parameters.pre_script_steps >>
  - e2e_run_script:
      pre_script: << parameters.pre_script >>
      script: << parameters.script >>
  - when:
      condition: << parameters.store-test-results >>
      steps:
        - run:
            name: Retrieve Test Output From Command Runner
            when: always
            command: |
              mkdir -p $(dirname "<< parameters.store-test-results >>")
              docker cp e2e-command-runner:<< parameters.store-test-results >> << parameters.store-test-results >>
        - store_test_results:
            path: << parameters.store-test-results >>
  - when:
      condition: << parameters.store-artifacts >>
      steps:
        - run:
            name: Retrieve Artifacts From Command Runner
            when: always
            command: |
              mkdir -p $(dirname "<< parameters.store-artifacts >>")
              docker cp e2e-command-runner:<< parameters.store-artifacts >> << parameters.store-artifacts >>
        - store_artifacts:
            path: << parameters.store-artifacts >>
